<section class="top_section p-2">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-5">
              <%= image_tag('logo.jpg', class: 'img-fluid') %>
            </div>
            <div class="col-md-7">
                <div class="d-block">
                    <p class="mb-0 text-center my-2 fs-3 text-white">
                        START A NEW ROUTE
                    </p>
                    <div class="d-flex mt-2">
                        <div style="width: 85%;">
                        <!-- For the Start location -->
                          <div class="d-flex align-items-center">
                            <p class="start_txt">Start</p>
                            <span class="depot_text">
                              <%= link_to '#', id: 'start-depot-link', data: { yard_address: '1600 Amphitheatre Parkway, Mountain View, CA' }, class: 'prevent-default text-white' do %>
                                Depot
                              <% end %>
                            </span>
                            <%= text_field_tag 'start_location', nil, class: 'form-control', id: 'start-location-input', placeholder: 'Enter or click Depot' %>
                            <span class="find_txt">
                              <%= link_to '#', id: 'start-find-link', class: "text-white" do %>
                                Find
                              <% end %>
                            </span>
                          </div>
                          <!-- For the End location -->
                          <div class="d-flex align-items-center mt-2">
                            <p class="start_txt">End</p>
                            <span class="depot_text">
                              <%= link_to '#', id: 'end-depot-link', data: { yard_address: '1600 Amphitheatre Parkway, Mountain View, CA' }, class: 'prevent-default text-white' do %>
                                Depot
                              <% end %>
                            </span>
                            <%= text_field_tag 'end_location', nil, class: 'form-control', id: 'end-location-input', placeholder: 'Enter or click Depot' %>
                            <span class="find_txt">
                              <%= link_to '#', id: 'end-find-link', class: "text-white" do %>
                                Find
                              <% end %>
                            </span>
                          </div>
                        </div>
                        <div style="width: 15%;" class="">
                            <button class="btn begin_btn" type="button">BEGIN</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<section class="rounte_section p-2">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8">
                <div id="map" style="height: 400px;", class="img-fluid w-100"></div>
            </div>
            <div class="col-md-4 p-0  bg-white position-relative">
                <div class="route-directions">
                  <h2>ROUTE DIRECTIONS</h2>
                  <p id="directions-content" style="height:274px; overflow-y: auto;"></p>
                  <h3 class="mb-0 open-modal-job-sheet">Build job Sheet</h3>
                </div>
            </div>
        </div>
    </div>
</section>
<div class="w-100">
  <p class="mb-0 text-center p-3 fs-2 text-white bg-red open-modal-button">
    BARRIERS
  </p>
</div>
<div class="w-100">
  <p class="mb-0 text-center p-3 fs-2 text-white bg-blue open-route-settings-modal">
    ROUTE SETTINGS
  </p>
</div>

<div class="modal fade" id="routeSettingsModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">ROUTE SETTINGS</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="route-settings-modal">
        <!-- Your route settings content goes here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-body" id="modal-content-container">
        <!-- Content will be loaded here dynamically -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" id="close-modal-button" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>


<!-- Include necessary libraries -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-control-geocoder@1.13.0/dist/Control.Geocoder.js"></script>

<!-- Map initialization -->
<script>
 var map;
 var locations = [];
 var allDirections = [];  // Declare outside the loop

  $(document).ready(function() {
    // Initialize the map once
    map = L.map('map').setView([51.505, -0.09], 13);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Populate locations array from server data
    <% @locations.each do |location| %>
      var markerColor = '<%= location[:barrier] ? "red" : "red" %>';

      var circleMarker = L.circleMarker([<%= location[:latitude] %>, <%= location[:longitude] %>], {
        radius: 4, // Adjust the size as needed
        color: markerColor,
        fillOpacity: 2
      })
      .addTo(map)
      .bindPopup('<%= location[:region] %>');
      locations.push(circleMarker.getLatLng());
    <% end %>

    // Set map view based on locations
    if (locations.length > 0) {
      map.fitBounds(L.latLngBounds(locations));
    } else {
      map.setView([51.505, -0.09], 13);
    }
  });
</script>

<!-- Modal handling -->
<script>
  $(document).ready(function() {
    var openModalButton = $('.open-modal-job-sheet');
    var myModal = new bootstrap.Modal($('#myModal'), {
      keyboard: false
    });
    openModalButton.on('click', function() {
      $.ajax({
        url: '<%= admin_job_sheet_path %>',
        method: 'GET',
        dataType: 'html',
        data: { start_location: allDirections},
        success: function(data, xhr) {
          $('#modal-content-container').html(data);
          myModal.show();
        },
        error: function(error) {
          console.error('Error fetching content:', error);
        }
      });
    });

    $('#close-modal-button').on('click', function() {
      myModal.hide();
    });
  });
</script>

<script>
  $(document).ready(function() {
    var openModalButton = $('.open-modal-button');
    var myModal = new bootstrap.Modal($('#myModal'), {
      keyboard: false
    });

    openModalButton.on('click', function() {
      // Fetch content dynamically using AJAX
      $.ajax({
        url: '<%= admin_home_barriers_path %>',
        method: 'GET',
        dataType: 'html',
        success: function(data) {
          $('#modal-content-container').html(data);
          myModal.show();
        },
        error: function(error) {
          console.error('Error fetching content:', error);
        }
      });
    });

    $('#close-modal-button').on('click', function() {
      myModal.hide();
    });
  });
</script>

<!-- File input handling -->
<script>
  $(document).on("click", ".browse", function() {
    var file = $(this)
      .parent()
      .parent()
      .parent()
      .find(".file");
    file.trigger("click");
  });

  $(document).on("change", ".file", function() {
    $(this)
      .parent()
      .find(".form-control")
      .val(
        $(this)
        .val()
        .replace(/C:\\fakepath\\/i, "")
      );
  });
</script>

<!-- Map interaction -->
<script>
  var allMarkers = [];

  $(document).ready(function() {
    var openRouteSettingsButton = $('.open-route-settings-modal');
    var routeSettingsModal = new bootstrap.Modal($('#routeSettingsModal'), {
      keyboard: false
    });

    openRouteSettingsButton.on('click', function() {
      routeSettingsModal.show();
      console.log('working');
      $.ajax({
        url: '<%= admin_route_setting_path %>',
        method: 'GET',
        dataType: 'html',
        success: function(data) {
          $('#route-settings-modal').html(data);
          myModal.show();
        },
        error: function(error) {
          console.error('Error fetching content:', error);
        }
      });
    });
  });

  function clearMarkers() {
    allMarkers.forEach(function(marker) {
      map.removeLayer(marker);
    });
  }

  // Function to add markers to the map based on selected regions
  function addMarkers(selectedRegions) {
    // Define the markers layer
    var markersLayer = L.layerGroup();

    // Clear existing markers
    markersLayer.clearLayers();

    // Loop through each selected region
    selectedRegions.forEach(function (selectedRegion) {
      // Find the location object for the selected region
      var location = locations.find(function (loc) {
        return loc.region === selectedRegion;
      });

      // Check if the location object is defined
      if (location && location.latitude && location.longitude) {
        // Create a marker and add it to the markers layer
        var marker = L.marker([location.latitude, location.longitude]).addTo(markersLayer);

        // Add a popup with the region name
        marker.bindPopup(selectedRegion);
      }
    });

    // Add the markers layer to the map
    map.addLayer(markersLayer);
  }

  $(document).on('change', 'select[name="regions"]', function() {
    var selectedRegionValues = $(this).val();
    var selectedLocations = [];

    selectedRegionValues.forEach(function(value) {
      selectedLocations.push(<%= @locations.to_json.html_safe %>.find(location => location.region === value));
    });

    addMarkers(selectedLocations);
  });

  $('#saveButton').on('click', function() {
    // Your logic for handling Save button click and updating the map
    // For example, display selected regions on the map
    var selectedRegions = $('select[name="regions"]').val();
    var selectedLocations = [];

    selectedRegions.forEach(function(value) {
      selectedLocations.push(<%= @locations.to_json.html_safe %>.find(location => location.region === value));
    });

    addMarkers(selectedLocations);

    // Additional logic as needed
    console.log(selectedRegions.join(', '));
    alert('Save button clicked! Selected regions: ' + selectedRegions.join(', '));
  });
</script>

<script>
  var jq = jQuery.noConflict();
  var lastStartSearchMarker = null;
  var lastEndSearchMarker = null;

  jq(document).ready(function () {
    function addMarker(location, address) {
      if (location && location.latitude && location.longitude) {
        var marker = L.marker([location.latitude, location.longitude]).addTo(map);
        marker.bindPopup(address || ''); // Assuming there is a 'region' property in your location object
        return marker;
      }
      return null;
    }

    function clearMarker(marker) {
      if (marker) {
        map.removeLayer(marker);
      }
    }

    function updateMap(address, isStartDepot) {
      if (address) {
        jq.ajax({
          url: '/admin/home/geocode', // Assuming you have a geocode action in your controller
          method: 'GET',
          data: { address: address },
          success: function (data) {
            if (isStartDepot) {
              clearMarker(lastStartSearchMarker);
              lastStartSearchMarker = addMarker(data, address);
              map.setView([data.latitude, data.longitude], 13);
            } else {
              clearMarker(lastEndSearchMarker);
              lastEndSearchMarker = addMarker(data, address);
              map.setView([data.latitude, data.longitude], 13);
            }
          },
          error: function (xhr, status, error) {
            console.error('Error geocoding address:', error);
            console.log('XHR object:', xhr);
          }
        });
      }
    }

    // Start depot link click event
    $(document).on("click", "#start-depot-link", function() {
      var yardAddress = $(this).data('yard-address');
      $("#start-location-input").val(yardAddress);
    });

    // Find button click event for start depot
    jq('#start-find-link').on('click', function (e) {
      e.preventDefault();
      var address = jq('#start-location-input').val();
      updateMap(address, true);
    });

    // End depot link click end-depot-linkevent
    $(document).on("click", "#end-depot-link", function() {
      var yardAddress = $(this).data('yard-address');
      $("#end-location-input").val(yardAddress);
    });
  
    // Find button click event for end depot
    jq('#end-find-link').on('click', function (e) {
      e.preventDefault();
      var address = jq('#end-location-input').val();
      updateMap(address, false);
    });
    jq('.prevent-default').on('click', function(e) {
      e.preventDefault();
    });
  });
</script>

<script>
  $('.begin_btn').on('click', function () {
    var startLocation = $('#start-location-input').val();
    var endLocation = $('#end-location-input').val();
    // Make a POST request to your Rails server
    $.ajax({
      url: '/admin/home/get_directions',
      method: 'POST',
      data: { start_location: startLocation, end_location: endLocation },
      success: function (data) {
        // Process the directions data and barriers data
        handleDirections(data);
      },
      error: function (error) {
        console.error('Failed to get directions from the server:', error);
      },
    });
  });

  function handleDirections(data) {
    if (data.status === 'OK') {
      var routes = data.routes;
  
      var barrier_coordinates = data.barriers; // Extract barrier_coordinates from the response
      var routePoints = [];    // Declare outside the loop
  
      // Clear existing directions
      allDirections = [];
  
      routes.forEach(function (route, routeIndex) {
        var routeInstructions = [];
  
        route.legs.forEach(function (leg) {
          leg.steps.forEach(function (step) {
            var startLocation = step.start_location;
            var endLocation = step.end_location;
  
            routePoints.push([startLocation.lat, startLocation.lng]);
            routePoints.push([endLocation.lat, endLocation.lng]);
  
            // Check if step.instructions is defined before pushing it
            if (step.html_instructions) {
              // Include the route number and instructions
              var instructions = step.html_instructions;
              routeInstructions.push(instructions);
  
              // Pass barrier_coordinates to updateMapWithDirection
              updateMapWithDirection(startLocation, endLocation, routeIndex, barrier_coordinates);
            }
          });
        });
  
        // Display route number and instructions
        displayRouteInstructions(routeIndex + 1, routeInstructions);
      });
  
      if (routePoints.length > 0) {
        map.fitBounds(routePoints);
      }
  
      // Update the HTML with the new directions
      var directionsContent = allDirections.join('<br>');
      $('#directions-content').html(directionsContent);
    } else {
      console.error('Directions request failed:', data.status);
    }
  }
  

  function updateMapWithDirection(startLocation, endLocation, routeIndex, barriersData) {
    var polyline = L.polyline([
      [startLocation.lat, startLocation.lng],
      [endLocation.lat, endLocation.lng],
    ]).addTo(map);

    polyline._routeIndex = routeIndex;

    var crossesBarriers = checkBarriers(polyline, barriersData);
    if (!crossesBarriers) {
      polyline.setStyle({ color: 'green' });
    }
  }

  function checkBarriers(polyline, barriersData) {
    var polylineCoordinates = polyline.getLatLngs().map(function (latLng) {
      return [latLng.lat, latLng.lng];
    });

    var crossesBarriers = barriersData.some(function (barrierCoordinates) {
      return isPolylineCrossingBarrier(polylineCoordinates, barrierCoordinates);
    });

    return crossesBarriers;
  }

  function isPolylineCrossingBarrier(polylineCoordinates, barrierCoordinates) {
    debugger
    var [barrierLat, barrierLng] = barrierCoordinates;
    var latitudes = polylineCoordinates.map(function (point) { return point[0]; });
    var longitudes = polylineCoordinates.map(function (point) { return point[1]; });

    var minLat = Math.min.apply(null, latitudes);
    var maxLat = Math.max.apply(null, latitudes);
    var minLng = Math.min.apply(null, longitudes);
    var maxLng = Math.max.apply(null, longitudes);

    return (
      minLat <= barrierLat && barrierLat <= maxLat &&
      minLng <= barrierLng && barrierLng <= maxLng
    );
  }

  function displayRouteInstructions(routeNumber, instructions) {
    allDirections.push("<strong>Route " + routeNumber + "</strong>");

    instructions.forEach(function (instruction) {
      allDirections.push(instruction);
    });
  }
</script>

